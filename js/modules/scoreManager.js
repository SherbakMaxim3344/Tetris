class ScoreManager {
    #score;
    #level;
    #lines;
    #pointsPerLine;
    #linesForLevelUp;

    constructor() {
        this.#score = 0;
        this.#level = 1;
        this.#lines = 0;
        this.#pointsPerLine = 100;
        this.#linesForLevelUp = 10;

        this.loadFromStorage();
    }

    get score() { return this.#score; }
    get level() { return this.#level; }
    get lines() { return this.#lines; }

    // *–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updateDisplay(){
        document.getElementById('score').textContent = this.#score;
        document.getElementById('level').textContent = this.#level;
        document.getElementById('lines').textContent = this.#lines;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å
        const userData = userManager.getUserData();
        document.getElementById('bestScore').textContent = userData.bestScore || 0;
        document.getElementById('speed').textContent = this.#level + 'x';
    }

    // *–î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏
    addLines(linesCount){
        const points = this.calculatePoints(linesCount);
        this.#score += points;
        this.#lines += linesCount;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        const newLevel = Math.floor(this.#lines / this.#linesForLevelUp) + 1;

        if(newLevel > this.#level){
            this.#level = newLevel;
            console.log(`–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É—Ä–æ–≤–µ–Ω—å: ${this.level}`);
        }
        this.updateDisplay();
        this.saveToStorage(); 
        return points;
    }

    // *–†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏–Ω–∏–π
    calculatePoints(linesCount) {
        const multiplier = [0, 100, 300, 500, 800];
        return (multiplier[linesCount] || 1000) * this.#level;
    }

    // *–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
    saveToStorage(){
        const stats = {
            score: this.#score,
            level: this.#level,
            lines: this.#lines,
            timestamp: new Date().toISOString()
        };
        localStorage.setItem('tetris.currentStats', JSON.stringify(stats));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.updateBestScore();
    }

    // *–û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    updateBestScore(){
        const userData = userManager.getUserData();
        if(this.#score > userData.bestScore){
            userData.bestScore = this.#score;
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ userManager –¥–ª—è consistency
            const allUsers = userManager.getAllUsers();
            allUsers[userData.username] = userData;
            userManager.saveAllUsers(allUsers);
            console.log('üéØ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!', this.#score);
        }
    }

    // *–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–í–´–ó–´–í–ê–ï–¢–°–Ø –ü–†–ò –ù–û–í–û–ô –ò–ì–†–ï)
    reset(){
        this.#score = 0;
        this.#level = 1;
        this.#lines = 0;
        this.updateDisplay();
        this.saveToStorage();
    }

    // *–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 
    loadFromStorage(){
        const saved = localStorage.getItem('tetris.currentStats');
        if (saved) {
            try {
                const stats = JSON.parse(saved);
                this.#score = stats.score || 0;
                this.#level = stats.level || 1;
                this.#lines = stats.lines || 0;
                this.updateDisplay();
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', e);
            }
        }
    }

    // *–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    saveFinalStats() {
        this.saveToStorage();
        // –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É
        userManager.updateUserStats(this.#score);
    }

    // *–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    getFinalScore() {
        return this.#score;
    }
}