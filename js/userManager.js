class UserManager {
    constructor() {
        this.currentUserKey = 'tetris.currentUser';
        this.usersDataKey = 'tetris.usersData';
    }

    // *–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    getAllUsers() {
        const usersJSON = localStorage.getItem(this.usersDataKey);
        return usersJSON ? JSON.parse(usersJSON) : {};
    }

    // *–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    saveAllUsers(users) {
        localStorage.setItem(this.usersDataKey, JSON.stringify(users));
    }

    // *–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        return localStorage.getItem(this.currentUserKey) || localStorage.getItem('tetris.username');
    }

    // *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setCurrentUser(username) {
        localStorage.setItem(this.currentUserKey, username);
        localStorage.removeItem('tetris.username'); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    }

    // *–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserData(username = null) {
        const targetUser = username || this.getCurrentUser();
        const allUsers = this.getAllUsers();
        
        if (targetUser && allUsers[targetUser]) {
            return allUsers[targetUser];
        }
        
        return this.createUser(targetUser || '–ì–æ—Å—Ç—å');
    }

    // *–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    createUser(username) {
        const allUsers = this.getAllUsers();
        
        const newUser = {
            username: username,
            firstLogin: new Date().toISOString(),
            lastLogin: new Date().toISOString(),
            gamesPlayed: 0,
            bestScore: 0,
            totalScore: 0 // –î–æ–±–∞–≤–∏–º –æ–±—â–∏–π —Å—á–µ—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        };
        
        allUsers[username] = newUser;
        this.saveAllUsers(allUsers);
        this.setCurrentUser(username);
        
        return newUser;
    }

    // *–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¢–ï–ü–ï–†–¨ –¢–û–õ–¨–ö–û –î–õ–Ø –°–ß–ï–¢–ê)
    updateUserStats(score = 0) {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return null;
        
        const allUsers = this.getAllUsers();
        const userData = allUsers[currentUser] ? {...allUsers[currentUser]} : this.createUser(currentUser);
        
        userData.lastLogin = new Date().toISOString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–π —Å—á–µ—Ç
        if (score > 0) {
            userData.totalScore = (userData.totalScore || 0) + score;
            if (score > userData.bestScore) {
                userData.bestScore = score;
                console.log(`üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥: ${score}`);
            }
        }
        
        allUsers[currentUser] = userData;
        this.saveAllUsers(allUsers);
        
        return userData;
    }

    // *–î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø)
    addGamePlayed() {
        const currentUser = this.getCurrentUser();
        if (!currentUser) return null;
        
        const allUsers = this.getAllUsers();
        const userData = allUsers[currentUser] ? {...allUsers[currentUser]} : this.createUser(currentUser);
        
        userData.lastLogin = new Date().toISOString();
        userData.gamesPlayed = (userData.gamesPlayed || 0) + 1;
        
        console.log(`üéÆ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–∞ –¥–ª—è ${currentUser}. –í—Å–µ–≥–æ –∏–≥—Ä: ${userData.gamesPlayed}`);
        
        allUsers[currentUser] = userData;
        this.saveAllUsers(allUsers);
        
        return userData;
    }

    // *–°–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    changeUser(newUsername) {
        if (newUsername && newUsername.trim() !== '') {
            const username = newUsername.trim();
            
            const oldUser = this.getCurrentUser();
            console.log('–ú–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å', oldUser, '–Ω–∞', username);
            
            this.setCurrentUser(username);
            const userData = this.getUserData(username);
            
            return userData;
        }
        return null;
    }

    // *–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    getUserStats() {
        return this.getUserData();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const userManager = new UserManager();